{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","createOffer","console","log","pc","offerToReceiveVideo","then","sdp","JSON","stringify","setLocalDescription","setRemoteDescription","desc","parse","textarearef","value","RTCSessionDescription","createAnswer","addCandidate","candidate","addIceCandidate","RTCIceCandidate","localVideoref","React","createRef","remoteVideoref","this","RTCPeerConnection","onicecandidate","e","oniceconnectionstatechange","ontrack","current","srcObject","streams","navigator","mediaDevices","getUserMedia","video","audio","stream","window","localStream","addStream","catch","style","width","height","margin","backgroundColor","ref","autoPlay","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,8HCyH5BC,G,8DAnHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAmDRC,YAAc,WACZC,QAAQC,IAAI,SAEZ,EAAKC,GAAGH,YAAY,CAAEI,oBAAqB,IACxCC,MAAK,SAAAC,GACJL,QAAQC,IAAIK,KAAKC,UAAUF,IAE3B,EAAKH,GAAGM,oBAAoBH,OA3DhB,EA+DlBI,qBAAuB,WACrBT,QAAQC,IAAI,8BACZ,IAAMS,EAAOJ,KAAKK,MAAM,EAAKC,YAAYC,OACzC,EAAKX,GAAGO,qBAAqB,IAAIK,sBAAsBJ,KAlEvC,EAqElBK,aAAe,WACbf,QAAQC,IAAI,UAEZ,EAAKC,GAAGa,aAAa,CAACZ,oBAAqB,IAAIC,MAAK,SAAAC,GAClDL,QAAQC,IAAIK,KAAKC,UAAUF,IAC3B,EAAKH,GAAGM,oBAAoBH,OA1Ed,EA8ElBW,aAAe,WACb,IAAMC,EAAYX,KAAKK,MAAM,EAAKC,YAAYC,OAC9Cb,QAAQC,IAAI,sBAAwBgB,GAEpC,EAAKf,GAAGgB,gBAAgB,IAAIC,gBAAgBF,KA/E5C,EAAKG,cAAgBC,IAAMC,UAAU,IACrC,EAAKC,eAAiBF,IAAMC,UAAU,IAJtB,E,gEAOE,IAAD,OAajBE,KAAKtB,GAAK,IAAIuB,kBAZI,MAelBD,KAAKtB,GAAGwB,eAAiB,SAACC,GACpBA,EAAEV,WACJjB,QAAQC,IAAIK,KAAKC,UAAUoB,EAAEV,aAGjCO,KAAKtB,GAAG0B,2BAA6B,SAACD,GACpC3B,QAAQC,IAAI0B,IAGdH,KAAKtB,GAAG2B,QAAU,SAACF,GACjB3B,QAAQC,IAAI,SACZ,EAAKsB,eAAeO,QAAQC,UAAYJ,EAAEK,QAAQ,IAepDC,UAAUC,aAAaC,aAZH,CAACC,OAAO,EAAMC,OAAO,IAYQjC,MAVjC,SAACkC,GACfC,OAAOC,YAAcF,EACrB,EAAKlB,cAAcU,QAAQC,UAAYO,EACvC,EAAKpC,GAAGuC,UAAUH,MAO2CI,OAJ/C,SAACf,GACf3B,QAAQC,IAAI,qBAAsB0B,Q,+BAuC/B,IAAD,OAEN,OACE,6BACE,2BAAOgB,MAAO,CAACC,MAAM,IAAKC,OAAO,IAAKC,OAAQ,EAAGC,gBAAiB,SAAUC,IAAOxB,KAAKJ,cAAe6B,UAAQ,IAC/G,2BAAON,MAAO,CAACC,MAAM,IAAKC,OAAO,IAAKC,OAAQ,EAAGC,gBAAiB,SAAUC,IAAOxB,KAAKD,eAAgB0B,UAAQ,IAChH,6BACA,4BAAQC,QAAS1B,KAAKzB,aAAtB,SACA,4BAAQmD,QAAS1B,KAAKT,cAAtB,UACA,6BACA,8BAAUiC,IAAK,SAAAA,GAAQ,EAAKpC,YAAcoC,KAC1C,6BACA,4BAAQE,QAAW1B,KAAKf,sBAAxB,0BACA,4BAAQyC,QAAW1B,KAAKR,cAAxB,sB,GAnGYmC,cCOEC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.4bafe962.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.localVideoref = React.createRef(\"\");\n    this.remoteVideoref = React.createRef(\"\");\n  }\n\n  componentDidMount(){\n    const pc_config = null;\n\n    // const pc_config = {\n    //   \"iceServers\" : [\n    //     {\n    //       urls: 'stun: [STUN-IP]: [PORT]',\n    //       'credential':'[YOUR-CREDENTIAL]',\n    //       'userName': '[USERNAME]'\n    //     }\n    //   ]\n    // }\n\n    this.pc = new RTCPeerConnection(pc_config);\n\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate)\n        console.log(JSON.stringify(e.candidate))\n    }\n\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    this.pc.ontrack = (e) => {\n      console.log(\"track\");\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    const constraints = {video: true, audio: false};\n\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream;\n      this.pc.addStream(stream)\n    }\n\n    const failure = (e) =>{\n      console.log(\"getUserMedia error\", e);\n    }\n\n    navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);\n  }\n\n  createOffer = () => {\n    console.log('Offer')\n\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        console.log(JSON.stringify(sdp))\n\n        this.pc.setLocalDescription(sdp)\n    })\n  }\n\n  setRemoteDescription = () =>{\n    console.log(\"setting remote description\");\n    const desc = JSON.parse(this.textarearef.value);\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  }\n\n  createAnswer = () => {\n    console.log(\"Answer\");\n    // this.pc.createAnswer({offerToReceiveVideo: 1, offerToReceiveAudio: 1}).then(sdp => {\n    this.pc.createAnswer({offerToReceiveVideo: 1}).then(sdp => {\n      console.log(JSON.stringify(sdp));\n      this.pc.setLocalDescription(sdp);\n    })\n  }\n\n  addCandidate = () => {\n    const candidate = JSON.parse(this.textarearef.value);\n    console.log(\"Adding candidate : \" , candidate);\n\n    this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n  }\n\nrender(){\n\n  return (\n    <div>\n      <video style={{width:240, height:240, margin: 5, backgroundColor: \"black\"}} ref = {this.localVideoref} autoPlay></video>\n      <video style={{width:240, height:240, margin: 5, backgroundColor: \"black\"}} ref = {this.remoteVideoref} autoPlay></video>\n      <br/>\n      <button onClick={this.createOffer}>Offer</button>\n      <button onClick={this.createAnswer}>Answer</button>\n      <br/>\n      <textarea ref={ref => {this.textarearef = ref}}/>\n      <br/>\n      <button onClick = {this.setRemoteDescription}>Set Remote Description</button>\n      <button onClick = {this.addCandidate}>Add Candidate</button>\n    </div>\n  )\n}\n\n}\n\n\n\n// function App() {\n//   return (\n//     <div>\n//       <video></video>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}